(:require [org.iq80.leveldb :refer [leveldb]])
(:require [org.iq80.leveldb.* :refer [leveldb]])
(:require [org.fusesource.leveldbjni.JniDBFactory :refer [leveldb]])
(:require [org.iq80.leveldb :as leveldb])
handle
handler
(-main)
(import 'org.iq80.leveldb.*')
(import 'org.iq80.leveldb)
(import 'org.fusesource.leveldbjni.JniDBFactory)
(import 'org.iq80.leveldb)
(import 'org.iq80.leveldb.*)
(import 'org.iq80.leveldb.)
(import 'org.iq80.leveldb.Options)
(.Options)
(Options)
(Options.)
(defprotocol DocumentStorage
"A place to store documents"
(put [id document] "Puts a document into the store"))
DocumentStorage
(deftype LevelDocuments [db]
DocumentStorage
(put [id document]
document
))
(LevelDocuments. "db")
_
exit
vim 
exit
(defn opendb [file]
  (let [options (Options.)]
    (.createIfMissing options true)
    (.open (JniDBFactory/factory) (File. file) options)))
(import 'org.iq80.leveldb.Options)
(import 'org.fusesource.leveldbjni.JniDBFactory)
(import 'java.io.File)
(import 'org.iq80.leveldb.Options)
(import 'org.fusesource.leveldbjni.JniDBFactory)
(import 'java.io.File)
(opendb "test2")
opendb
(defn opendb [file]
  (let [options (Options.)]
    (.createIfMissing options true)
    (.open (JniDBFactory/factory) (File. file) options)))
opendb
(opendb "test2")
(opendb "test3")
(let [db (opendb "test4")]
(.close db))
(opendb "test4")
exit
